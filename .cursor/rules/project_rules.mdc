---
description: Cursor rules for the XTracker project
globs: **/*
alwaysApply: true
---

# General Project Rules

## Terminal Commands
- Always run commands with full path and command in the same line
- Use format: `cd C:\Source\Repos\XTracker\[directory] && [command]`
- When running the backend project, make sure you're in the correct directory: `cd backend/XTracker.Api && dotnet run`

## Git 
 - Use the following when creating commit messages: 
        FORMAT:
        <type>(<scope>): <subject>
        <BLANK LINE>
        <body>
        <BLANK LINE>
        <footer>


        TERMS:

        feat: for a new feature for the user, not a new feature for build script. Such commit will trigger a release bumping a MINOR version.
        fix: for a bug fix for the user, not a fix to a build script. Such commit will trigger a release bumping a PATCH version.
        perf: for performance improvements. Such commit will trigger a release bumping a PATCH version.
        docs: for changes to the documentation.
        style: for formatting changes, missing semicolons, etc.
        refactor: for refactoring production code, e.g. renaming a variable.
        test: for adding missing tests, refactoring tests; no production code change.
        build: for updating build configuration, development tools or other changes irrelevant to the user.
        BREAKING CHANGE: a commit that has a footer BREAKING CHANGE:, or appends a ! after the type/scope, introduces a breaking API change (correlating with MAJOR in Semantic Versioning). A BREAKING CHANGE can be part of commits of any type.


        EXAMPLES:

        --------------------------------------------------------------------------------
        feat: allow provided config object to extend other configs
        --------------------------------------------------------------------------------
        feat!: send an email to the customer when a product is shipped
        --------------------------------------------------------------------------------
        feat: allow provided config object to extend other configs

        BREAKING CHANGE: "extends" key in config file is now used for extending other config files
        --------------------------------------------------------------------------------
        docs: correct spelling of CHANGELOG
        --------------------------------------------------------------------------------
        chore!: drop support for Node 6

        BREAKING CHANGE: use JavaScript features not available in Node 6.
        --------------------------------------------------------------------------------
 - Dont write overly verbose commits. You should only use four bullet points at most. 